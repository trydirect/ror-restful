version: '2.1'

volumes:
  db:
    driver: local
  elasticdata:
    driver: local
  redis-data:
    driver: local

services:
  web:
    build:
      context: ./railsrest
      dockerfile: Dockerfile
    image: railsrest:0.1
    container_name: web
    restart: always
    entrypoint: ["rails", "server", "--binding", "0.0.0.0", "--port", "3000" ]
#      volumes:
#        - ./railsrest/build-conf/supervisord/rails_restful.conf:/etc/supervisor/conf.d/rails_restful.conf
    links:
      - db
      - mq
    depends_on:
      - db
      - mq
    ports:
      - "3000:3000"
    env_file: .env


  elasticsearch:
    image: elasticsearch:5.4.3
    restart: always
    container_name: elasticsearch
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    links:
      - web
    depends_on:
      - web
    volumes:
      - elasticdata:/usr/share/elasticsearch/data
      - ./railsrest/build-conf/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"

  kibana:
      image: kibana:5.4.3
      restart: always
      container_name: kibana
      depends_on:
        - elasticsearch
      ports:
        - "5601:5601"
      links:
        - elasticsearch
      env_file:
        - .env
      volumes:
        - ./railsrest/build-conf/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml

  logstash:
    build: ./railsrest/build-conf/logstash
    container_name: logstash
    restart: always
    environment:
      LS_JAVA_OPTS: "-Xms1g -Xmx4g"
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    links:
      - elasticsearch

  filebeat:
    build:
      context: ./railsrest/build-conf/filebeat
      dockerfile: Dockerfile
    image: docker-logs-elk/filebeat:1.0.0
    container_name: filebeat
    volumes:
      # needed to access all docker logs (read only) :
     - "/var/lib/docker/containers:/usr/share/dockerlogs/data:ro"
      # needed to access additional informations about containers
     - "/var/run/docker.sock:/var/run/docker.sock"
    links:
       - logstash

  redis:
      image: redis:latest
      restart: always
      container_name: redis
      env_file:
        - .env
      volumes:
        - redis-data:/data
      healthcheck:
        timeout: 5s
        interval: 5s
        retries: 5
        test:
          - "CMD"
          - "bash"
          - "-c"
          - "exec 3<> /dev/tcp/127.0.0.1/6379 && echo PING >&3 && head -1 <&3 | grep PONG"

  db:
    image: postgres:11.2
    container_name: db
    restart: always
    ports:
      - "5432"
    env_file:
      - .env
    command: postgres -c hba_file=/etc/pg_hba.conf
    volumes:
      - ./configs/postgresql/pg_hba.conf:/etc/pg_hba.conf
      - db:/var/lib/postgresql/data

# entry point
  nginx:
    image: trydirect/nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    links:
      - web
      - kibana
    volumes:
      - ./railsrest/src/backend/public:/usr/share/nginx/html
      - ./railsrest/build-conf/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./railsrest/build-conf/nginx/conf.d:/etc/nginx/conf.d
      - ./railsrest/build-conf/supervisord/nginx.conf:/etc/supervisor/conf.d/nginx.conf
    entrypoint: /usr/bin/supervisord -c /etc/supervisor/supervisord.conf -n

  # basic data bus for interaction between servers
  mq:
    container_name: mq
    image: rabbitmq:3-management
    restart: always
    env_file:
      - .env
    ports:
      # note! from others containers need connect to 5672 port, not 2172
      # 2172 using for debug
      - "2172:5672"
      - "5672"
      - "21072:15672"
    healthcheck:
      timeout: 5s
      interval: 5s
      retries: 5
      test: ["CMD", "rabbitmqctl", "status"]